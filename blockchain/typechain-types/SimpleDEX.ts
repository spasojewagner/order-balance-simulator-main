/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SimpleDEX {
  export type TradeStruct = {
    tradeId: string;
    buyer: AddressLike;
    seller: AddressLike;
    amount: BigNumberish;
    price: BigNumberish;
    timestamp: BigNumberish;
    executed: boolean;
  };

  export type TradeStructOutput = [
    tradeId: string,
    buyer: string,
    seller: string,
    amount: bigint,
    price: bigint,
    timestamp: bigint,
    executed: boolean
  ] & {
    tradeId: string;
    buyer: string;
    seller: string;
    amount: bigint;
    price: bigint;
    timestamp: bigint;
    executed: boolean;
  };
}

export interface SimpleDEXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeTrade"
      | "getTrade"
      | "totalTradesExecuted"
      | "trades"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TradeExecuted"): EventFragment;

  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [string, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTrade", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalTradesExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "trades", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTradesExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    tradeId: string,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: string,
    buyer: string,
    seller: string,
    amount: bigint,
    price: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tradeId: string;
    buyer: string;
    seller: string;
    amount: bigint;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleDEX extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleDEX;
  waitForDeployment(): Promise<this>;

  interface: SimpleDEXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeTrade: TypedContractMethod<
    [
      _tradeId: string,
      _buyer: AddressLike,
      _seller: AddressLike,
      _amount: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getTrade: TypedContractMethod<
    [_tradeId: string],
    [SimpleDEX.TradeStructOutput],
    "view"
  >;

  totalTradesExecuted: TypedContractMethod<[], [bigint], "view">;

  trades: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        tradeId: string;
        buyer: string;
        seller: string;
        amount: bigint;
        price: bigint;
        timestamp: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      _tradeId: string,
      _buyer: AddressLike,
      _seller: AddressLike,
      _amount: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTrade"
  ): TypedContractMethod<
    [_tradeId: string],
    [SimpleDEX.TradeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalTradesExecuted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trades"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        tradeId: string;
        buyer: string;
        seller: string;
        amount: bigint;
        price: bigint;
        timestamp: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;

  filters: {
    "TradeExecuted(string,address,address,uint256,uint256,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
  };
}
